DEBUG_OPTIONS = -g -Wall
OPTIMIZE = -fPIC -O3

SINGLE_C_FILE_PROGRAMS =
SINGLE_CXX_FILE_PROGRAMS =
SINGLE_FILE_PROGRAMS = $(SINGLE_C_FILE_PROGRAMS) $(SINGLE_CXX_FILE_PROGRAMS)

TARGET_1 = liblbk.so
TARGET_2 =
TARGET_3 =

IS_BEOS_PLATFORM = 0
ifeq ($(shell uname),Haiku)
IS_BEOS_PLATFORM = 1
else
ifeq ($(shell uname),BeOS)
IS_BEOS_PLATFORM = 1
endif
endif

ADD_ONS_DIRS = \
	vpd

ifeq ($(shell uname),Linux)
ADD_ONS_DIRS += \
	npi-oled-hat
endif

OBJECTS_1 = \
	add-ons/LBPanelDevice.o \
	add-ons/LBPanelBuffer.o \
	LBView.o \
	LBPageView.o \
	LBAppSettings.o \
	LBApplication.o \
	LBIconData.o \
	LBScopeItem.o \
	LBScopeHandler.o \
	LBAlertView.o \
	LBListItem.o \
	LBListView.o \
	LBMenuItem.o \
	LBMenuView.o

OBJECTS_2 =
OBJECTS_3 =

TARGET = $(TARGET_1) $(TARGET_2) $(TARGET_3)
OBJECTS = $(OBJECTS_1) $(OBJECTS_2) $(OBJECTS_3)

CC = ${CROSS_COMPILE}gcc
CXX = ${CROSS_COMPILE}g++
LD = ${CROSS_COMPILE}ld

CFLAGS = $(DEBUG_OPTIONS) $(OPTIMIZE)
CXXFLAGS = $(DEBUG_OPTIONS) $(OPTIMIZE)
LDFLAGS =

SO_CFLAGS = -fPIC
SO_LDFLAGS = -shared
SO_NAME = liblbk.so

ifeq ($(IS_BEOS_PLATFORM),0)
	CFLAGS += $(shell lite-beapi-config --cflags)
	CXXFLAGS += $(shell lite-beapi-config --cflags)
	LDFLAGS += $(shell lite-beapi-config --libs)
else
	# BeOS/HaikuOS
	CXXFLAGS += -Wno-multichar
	LDFLAGS += -lbe -lroot
	SO_LDFLAGS += -Xlinker --soname=$(SO_NAME)
endif

CFLAGS += $(SO_CFLAGS) -I../../include -I../include
CXXFLAGS += $(SO_CFLAGS) -I../../include -I../include

all: targets addons $(TARGET)

$(C_PROGRAM): $(C_PROGRAM).o
	$(CC) $(DEBUG_OPTIONS) $(OPTIMIZE) $^ -o $@ $(LDFLAGS)

$(CXX_PROGRAM): $(CXX_PROGRAM).o
	$(CXX) $(DEBUG_OPTIONS) $(OPTIMIZE) $^ -o $@ $(LDFLAGS)

targets:
	for f in $(SINGLE_C_FILE_PROGRAMS) .none; do \
		(test $$f = .none || CC=$(CC) $(MAKE) $(MAKEFLAGS) -f Makefile.alone C_PROGRAM=$$f $$f) \
	done
	for f in $(SINGLE_CXX_FILE_PROGRAMS) .none; do \
		(test $$f = .none || CXX=$(CXX) $(MAKE) $(MAKEFLAGS) -f Makefile.alone CXX_PROGRAM=$$f $$f) \
	done

addons:
	for f in $(ADD_ONS_DIRS) .none; do \
		(test $$f = .none || $(MAKE) $(MAKEFLAGS) -C add-ons/$$f -f Makefile.alone) \
	done

$(TARGET_1): $(OBJECTS_1)
	$(CXX) $(DEBUG_OPTIONS) $(OPTIMIZE) $(SO_LDFLAGS) $^ -o $@ $(LDFLAGS)

$(TARGET_2): $(OBJECTS_2)
	$(CXX) $(DEBUG_OPTIONS) $(OPTIMIZE) $^ -o $@ $(LDFLAGS)

$(TARGET_3): $(OBJECTS_3)
	$(CXX) $(DEBUG_OPTIONS) $(OPTIMIZE) $^ -o $@ $(LDFLAGS)

clean:
	for f in $(ADD_ONS_DIRS) .none; do \
		(test $$f = .none || $(MAKE) $(MAKEFLAGS) clean -C add-ons/$$f -f Makefile.alone) \
	done
	for f in $(TARGET) $(OBJECTS) .none; do \
		(test $$f = .none || test ! -e "$$f" || rm -f $$f); \
	done
	for f in $(SINGLE_FILE_PROGRAMS) $(TARGET) .none; do \
		(test $$f = .none || test ! -e "$$f" || rm -f $$f); \
		(test $$f = .none || test ! -e "$$f.o" || rm -f $$f.o); \
		(test $$f = .none || test ! -e "$$f.obj" || rm -f $$f.obj); \
		(test $$f = .none || test ! -e "$$f.exe" || rm -f $$f.exe); \
		(test $$f = .none || test ! -e "$$f.exe.stackdump" || rm -f $$f.exe.stackdump); \
		(test $$f = .none || test ! -e "$$f.exe.so" || rm -f $$f.exe.so); \
	done

.SUFFIXES: .c .cpp .cxx .cc .o
.c.o:
	$(CC) $(CFLAGS) -c $< -o $@

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $< -o $@

.cxx.o:
	$(CXX) $(CXXFLAGS) -c $< -o $@

.cc.o:
	$(CXX) $(CXXFLAGS) -c $< -o $@

